<?php 
/**
 * Mapper Object for FrontPageModuleColumn
 * 
 * @copyright 2007 Global Market Insite Inc
 * @author harsha
 * @version 1.1
 * @package Mapper
 * @subpackage Common
 *
 */ 
class Hb_Mapper_Common_FrontPageModuleColumn extends Hb_Mapper_Mapper 
{
	protected $primary_key = 'frontpage_module_column_id';
	
	protected $table       = 'frontpage_module_column';
	
	/**
	 * Builds and returns the Front Page Module Column domain object for this mapper
	 *
	 * @param $row $object Result row from the Zend_Db framework for the frontpage_module_column table
	 * @return object An instance of the Front Page Module Column domain object 
	 */	
	protected function doBuildObject($row)
	{
		return new Hb_App_Common_FrontPageModuleColumn($row->frontpage_module_column_id,
									$row->frontpage_module_id,
									$row->column_name
									);
	}

	/**
	 * Builds and returns a Zend_Db Select object
	 *
	 * @return $select object Result Select object from the Zend_Db framework 
	 */
	protected function GetBaseSelect()
	{
		$db 		= Hb_Util_Db_Connection::GetInstance();
		$select 	= $db->select();
	 	$select->from(array('fmc' => $this->table), array('frontpage_module_column_id',
	 																	  'frontpage_module_id',
	 																	  'column_name'));
	 	
	 	return $select;
	}
	
	/**
	 * Finds a Front page module column by it's Id
	 *
	 * @param $id int The record identifier that uniquely identifies the row.
	 * @return obj Result row from the Zend_Db framework for the frontpage_module_column table
	 */	
	protected function doFindById($id)
	{
	 	$select = $this->GetBaseSelect();
		$select->where('fmc.'. $this->primary_key .'= ?', $id);
		 	
		return $this->getRow($select);
	}
	
	/**
	 * Saves a dirty domain object to the persistence layer
	 *
	 * @param Hb_App_Object $obj object Instance of the Front page module column domain object
	 */
	protected function doSave(Hb_App_Object $obj)
	{
	 	/* @var $obj Hb_App_Common_FrontPageModuleColumn   */
		 	
	 	$data  = array(
			'frontpage_module_id'	=> $obj->GetFrontPageModuleID(),
			'column_name'	=> $obj->GetColumnName()
	 	);
	 	
	 	$db = Hb_Util_Db_Connection::GetInstance();
	 	
	 	if(is_null($obj->GetId())) {
	 		$db->insert($this->table, $data);
	 		$obj->SetFrontPageModuleColumnID($db->lastInsertId());
	 	}else {
	 		$db->update($this->table, $data, $this->primary_key. '=' .$obj->GetId());
	 	}
	}
	
}
?>