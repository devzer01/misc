<?php 
/**
 * Mapper Object for Pricing Type
 * 
 * @copyright 2007 Global Market Insite Inc
 * @author harsha
 * @version 1.1
 * @package Mapper
 * @subpackage Common
 *
 */ 
class Hb_Mapper_Common_PricingType extends Hb_Mapper_Mapper 
{
	/**
	 * Primary key
	 *
	 * @var string 
	 */
	protected $primary_key = 'pricing_type_id';
	
	/**
	 * Table name
	 *
	 * @var string 
	 */
	protected $table = 'pricing_type';
	
	/**
	 * Builds and returns the Pricing Type domain object for this mapper
	 *
	 * @param $row $object Result row from the Zend_Db framework for the pricing_type table
	 * @return object An instance of the Pricing Type domain object 
	 */	
	protected function doBuildObject($row)
	{
		return new Hb_App_Common_PricingType($row->pricing_type_id, $row->pricing_type_description);
	} 
	
	/**
	 * Builds and returns a Zend_Db Select object
	 *
	 * @return $select object Result Select object from the Zend_Db framework 
	 */
	protected function GetBaseSelect()
	{
		$db 		= Hb_Util_Db_Connection::GetInstance();
		$select 	= $db->select();
	 	$select->from(array('pt' => 'pricing_type'), array('pricing_type_id',
								  								  		 	'pricing_type_description')
						 );
	 	
	 	return $select;
	}
	
	/**
	 * Finds a Pricing Type by it's Id
	 *
	 * @param $id int The record identifier that uniquely identifies the row.
	 * @return obj Result row from the Zend_Db framework for the pricing_type table
	 */	
	protected function doFindById($id)
	{
	 	$select = $this->GetBaseSelect();
		$select->where('pt.'. $this->primary_key .'= ?', $id);
		 	
		return $this->getRow($select);
	}
	
	/**
	 * Saves a dirty domain object to the persistence layer
	 *
	 * @param Hb_App_Object $obj object Instance of the pricing_type domain object
	 */
	protected function doSave(Hb_App_Object $obj)
	{
	 	/* @var $obj Hb_App_Common_PricingType   */
		 	
	 	$data  = array(
			'pricing_type_description'	=> $obj->GetTypeDescription()
	 	);
	 	
	 	$db = Hb_Util_Db_Connection::GetInstance();
	 	
	 	if(is_null($obj->GetId())) {
	 		$db->insert($this->table, $data);
	 		$obj->SetTypeId($db->lastInsertId());
	 	}else {
	 		$db->update($this->table, $data, $this->primary_key. '=' .$obj->GetId());
	 	}
	}
	
}



?>